#!/usr/bin/env python
from fileprogressadapter import FileProgressProducer
from filedownloadprotocol import FileDownloadProtocol
from StringIO import StringIO
from httprequests import HTTPQueryRunner
import routing
import sys
import json
from playlistprint import printPlaylist
from twisted.web.client import FileBodyProducer
from twisted.internet.defer import Deferred
import re
import mimetypes
from os import path

def loadConfigFile(file):
	f = open(file)
	res = json.load(f)
	f.close()
	return res

def loadConfig():
	homeConfig = path.expanduser("~/.config/imp")

	if path.exists(homeConfig):
		return loadConfigFile(homeConfig)
	else:
		return {}

config = loadConfig()
http = HTTPQueryRunner(config)


def parseQueryString(strn):
	res = {}
	rex = re.compile("^(.+?)=(.*)$")

	for sstr in strn.split('&'):
		print sstr
		k,v = rex.match(sstr).groups()
		res[k] = v

	print res
	return res


##
# Main code
soundcloud_regex = "^https?://[^/]*soundcloud.com/[^/]+/[^/]+"
youtube_regex = "^([a-zA-Z0-9_-]+)$|^https?://[^/]+youtube\.com/watch\?([^#]+)"

def discard(body):
	pass

def printMe(body):
	print body

def printPlaylist_resp(body):
	printPlaylist(json.loads(body))

def add_youtube_v(vId):
	return http.sendSimpleCB("ENQUEUE", "/youtube/video/" + vId, discard)

def add_youtube_pl(plId):
	return http.sendSimpleCB("ENQUEUE", "/youtube/playlist/" + plId, discard)

def add_youtube(link):
	m = re.compile(youtube_regex).match(link)
	if m.group(1):
		http.reactOn(add_youtube_v(m.group(1)))
	else:
		qs = parseQueryString(m.group(2))
		vId, plId = [qs["v"], qs["list"]]

		d = Deferred()
		if vId:
			print "Found video ID: %s" % vId
			d.addCallback(lambda b: add_youtube_v(vId))
		if plId:
			print "Found playlist ID: %s" % plId
			d.addCallback(lambda b: add_youtube_pl(plId))
		d.callback(0)
		http.reactOn(d)


def add_soundcloud(link):
	m = re.compile(soundcloud_regex).match(link)
	http.reactOn(http.sendSimpleCB("ENQUEUE", "/soundcloud/url", discard, FileBodyProducer(StringIO(m.group(0)))))

def add_upload(files):
	r = upload_files(files)
	if r == None:
		print("No files specified for upload.")
	else:
		http.reactOn(r)

def onUploadProgress(fil):
	def onUploadProgress_inner(progress):
		sys.stdout.write("Uploading '%s'... %d%%\r" % (fil, (progress * 100)))
		sys.stdout.flush()
	return onUploadProgress_inner

def upload_files(files):
	if len(files) == 0:
		return None

	fil = files[0]
	return http.sendCB("POST", "/upload", upload_on_response(fil,files[1:]), FileProgressProducer(fil,onUploadProgress(fil)))

def upload_on_response(curfile,files):
	def on_response(response):
		sys.stdout.write("Uploading '%s'... done.\n" % curfile)
		sys.stdout.flush()
		return upload_files(files)
	return on_response

def add_stream(uri):
	http.reactOn(http.sendSimpleCB("POST", "/stream", discard, FileBodyProducer(StringIO(uri))))

def add_tts(text):
	http.reactOn(http.sendSimpleCB("POST", "/text_to_speech", discard, FileBodyProducer(StringIO(text))))

def add_fav(keyword):
	http.reactOn(http.sendSimpleCB("ENQUEUE", "/favorites/%s" % keyword, discard))

# Queue management
def playlist():
	http.reactOn(http.sendSimpleCB("GET", "/queue", printPlaylist_resp))

def playlist_raw():
	http.reactOn(http.sendSimpleCB("GET", "/queue", printMe))

def flush():
	http.reactOn(http.sendSimpleCB("DELETE", "/queue", discard))

def history():
	http.reactOn(http.sendSimpleCB("GET", "/history", printPlaylist_resp))

def history_raw():
	http.reactOn(http.sendSimpleCB("GET", "/history", printMe))

def leech(idx):
	def onProgress(bytes):
		sys.stdout.write("Downloading... %d kB\r" % (bytes / 1024))
		sys.stdout.flush()

	def requestMediaForIdx(body):
		hist = json.loads(body)
		media = hist[idx]
		ext = mimetypes.guess_extension(media["info"]["mimetype"]) if "mimetype" in media["info"] else ".unown"
		artist = media["info"]["artist"] if "artist" in media["info"] else "Unknown"
		title = media["info"]["title"] if "title" in media["info"] else "Unknown"

		outfile = open("%s - %s%s" % (artist,title,ext), "w")
		fdl = FileDownloadProtocol(outfile, onProgress)
		return http.sendWithReceiver("DOWNLOAD","/queue/" + media["id"].encode('latin-1'),fdl)

	def printDone(ignore):
		sys.stdout.write("Downloading... done.                        \n")
		sys.stdout.flush()

	d = http.sendSimpleCB("GET", "/history", requestMediaForIdx)
	d.addCallback(printDone)
	http.reactOn(d)

# Current
def next():
	http.reactOn(http.sendSimpleCB("NEXT", "/control/current", printMe))
def previous():
	http.reactOn(http.sendSimpleCB("PREVIOUS", "/control/current", printMe))
def pause():
	http.reactOn(http.sendSimpleCB("PAUSE", "/control/current", printMe))
def stop():
	http.reactOn(http.sendSimpleCB("STOP", "/control/current", printMe))
def replay():
	http.reactOn(http.sendSimpleCB("REPLAY", "/control/current", printMe))

# Favs
def print_favs(body):
	for fav in json.loads(body):
		print "%d: %s -- %s -- %s -- %s -- %s" % (fav["id"], ",".join(fav["keywords"]), fav["name"], fav["plugin"], fav["user"], ",".join(fav["options"]))

def favorites_list():
	http.reactOn(http.sendSimpleCB("GET", "/favorites", print_favs))

def favorites_add(plugin,name,rest):
	http.reactOn(http.sendSimpleCB("POST", "/favorites", discard, FileBodyProducer(StringIO(json.dumps({
		"plugin": plugin,
		"name": name,
		"is_public": True,
		"options": rest
	})))))

def favorites_remove(fav):
	http.reactOn(http.sendSimpleCB("DELETE", "/favorites/%s" % fav, discard))

def favorites_setkeywords(fav,keywords):
	http.reactOn(http.sendSimpleCB("PATCH", "/favorites/%s" % fav, discard, FileBodyProducer(StringIO(json.dumps({
		"keywords": keywords
	})))))

# Volume
def volume_get():
	http.reactOn(http.sendSimpleCB("GET", "/control/volume", printMe))

def volume_set(volume):
	http.reactOn(http.sendSimpleCB("PUT", "/control/volume", discard, FileBodyProducer(StringIO(str(volume)))))


def routeMain(argv):
	r = routing.Router(argv)
	# Queue management
	r.match        ( lambda b: playlist(), [] )
	r.pl           ( lambda b: playlist_raw() )
	r.flush        ( lambda b: flush() )
	r.history      ( lambda b: history() )
	r.hl           ( lambda b: history_raw() )
	r.leech        ( lambda b: leech(int(b["idx"])),
	                 [":idx"] )

	# Enqueueing
	r.add          ( lambda b: add_youtube(b["link"]),
	                 [["youtube","yt","y","tube"],":link"],
	                 { "link": youtube_regex } )
	r.add          ( lambda b: add_upload(b["..."]),
	                 [["upload","ul","u","uload"],"..."] )
	r.add          ( lambda b: add_stream(b["uri"]),
	                 [["stream","str","s"],":uri"] )
	r.add          ( lambda b: add_soundcloud(b["link"]),
	                 [["soundcloud","sc","c","cloud"],":link"],
	                 { "link": soundcloud_regex } )
	r.add          ( lambda b: add_tts(b["text"]),
	                 ["tts",":text"] )
	r.add          ( lambda b: add_fav(b["keyword"]),
	                 ["fav",":keyword"] )

	# Favs
	r.fav          ( lambda b: favorites_list(),
	                 ["list"] )
	r.fav          ( lambda b: favorites_add(b["plugin"],b["name"],b["..."]),
	                 ["add",":plugin",":name","..."],
	                 { "plugin": "stream" } )
	r.fav          ( lambda b: favorites_remove(b["id"]),
	                 ["remove",":id"] )
	r.fav          ( lambda b: favorites_setkeywords(b["id"],b["..."]),
	                 ["keywords",":id","..."] )

	# Current
	r.skip         ( lambda b: next() )
	r.next         ( lambda b: next() )
	r.previous     ( lambda b: previous() )
	r.pause        ( lambda b: pause() )
	r.stop         ( lambda b: stop() )
	r.replay       ( lambda b: replay() )
	r.play         ( lambda b: replay() )

	# Controls
	r.volume       ( lambda b: volume_get() )
	r.v            ( lambda b: volume_get() )
	r.volume       ( lambda b: volume_set(int(b["val"])),
	                 [":val"] )
	r.v            ( lambda b: volume_set(int(b["val"])),
	                 [":val"] )

	r.finalize()

routeMain(sys.argv[1:])
