#!/usr/bin/env python
from twisted.web.client import FileBodyProducer
from httprequests import *
from animp import an_imp
import routing
import sys
import json
from colorama import Fore, Back, Style

IMP_VERSION = "0.1.awesome"

def printMe(body):
	print body

def header(txt):
	return Style.BRIGHT + txt + Style.RESET_ALL

def dejustify_header(normal_size):
	return str(normal_size + len(Style.BRIGHT) + len(Style.RESET_ALL))

def dejustify_imp(normal_size):
	return str(normal_size + len(Fore.GREEN) + len(Style.RESET_ALL))

def printPlaylist(body):
	pl = json.loads(body)
	print "|{0:*^37}|{1:*^5}|{2:*^32}|{3:*^20}|{4:*^10}|".format("","","","","")
	print ("|{0:^37}| {1:>" + dejustify_header(3) + "} | {2:<" + dejustify_header(30) + "} | {3:<" + dejustify_header(18) + "} | {4:<" + dejustify_header(8) + "} |").format(
		"imp version " + IMP_VERSION,
		header("No."),
		header("Title"),
		header("Artist"),
		header("Queuedby"))
	print "|{0:*^37}|{1:*^5}|{2:*^32}|{3:*^20}|{4:*^10}|".format("","","","","")
	i = 0	
	for media in pl:
		if i >= len(an_imp):
			print "|{0:^37}| {1:>3} | {2:<30} | {3:<18} | {4:<8} |".format(
				"",
				i if i > 0 else str("> 0"),
				media["info"]["title"],
				media["info"]["artist"],
				media["info"]["user"])
		else:
			print ("|{0:^" + dejustify_imp(37) + "}| {1:>3} | {2:<30} | {3:<18} | {4:<8} |").format(
				Fore.GREEN + an_imp[i] + Style.RESET_ALL,
				i if i > 0 else str("> 0"),
				media["info"]["title"],
				media["info"]["artist"],
				media["info"]["user"])
		i += 1

	if i < len(an_imp):
		for j in range(i,len(an_imp)):
			print ("|{0:^" + dejustify_imp(37) + "}|{1:^5}|{2:^32}|{3:^20}|{4:^10}|").format(Fore.GREEN + an_imp[j] + Style.RESET_ALL,"","","","")
	print "|{0:*^37}|{1:*^5}|{2:*^32}|{3:*^20}|{4:*^10}|".format("","","","","")



def discard(body):
	pass


# Temp queueing
def add_youtube(vId):
	sendHTTPSimple("ENQUEUE", "/youtube/video/" + vId,	discard)

def add_upload(file):
	f = open(file,"r")
	sendHTTPSimple("POST", "/upload", discard, FileBodyProducer(f))


def playlist():
	sendHTTPSimple("GET", "/queue", printPlaylist)

def playlist_raw():
	sendHTTPSimple("GET", "/queue", printMe)

def flush():
	sendHTTPSimple("DELETE", "/queue", discard)

def history():
	sendHTTPSimple("GET", "/history", printPlaylist)

# Current
def next():
	sendHTTPSimple("NEXT", "/control/current", printMe)
def previous():
	sendHTTPSimple("PREVIOUS", "/control/current", printMe)
def pause():
	sendHTTPSimple("PAUSE", "/control/current", printMe)
def stop():
	sendHTTPSimple("STOP", "/control/current", printMe)
def replay():
	sendHTTPSimple("REPLAY", "/control/current", printMe)

r = routing.Router(sys.argv[1:])
# Queue management
r.match        ( lambda b: playlist(), [] )
r.pl           ( lambda b: playlist_raw() )
r.flush        ( lambda b: flush() )
r.history      ( lambda b: history() )

# Enqueueing
r.add          ( lambda b: add_youtube(b["id"]),
                 [["youtube","yt","tube"],":id"],
                 { "id": "[a-zA-Z0-9_-]+" } )
r.add          ( lambda b: add_upload(b["file"]),
	             [["upload","ul","u","uload"],":file"] )

# Current
r.next         ( lambda b: next() )
r.previous     ( lambda b: previous() )
r.pause        ( lambda b: pause() )
r.stop         ( lambda b: stop() )
r.replay       ( lambda b: replay() )

r.finalize()



