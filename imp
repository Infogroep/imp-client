#!/usr/bin/env python
from twisted.web.client import FileBodyProducer
from StringIO import StringIO
from httprequests import http, HTTPQueryRunner
from animp import an_imp
import routing
import sys
import json
from colorama import Fore, Back, Style
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/clint")
from clint.textui import colored

IMP_VERSION = "0.1.awesome"

def printMe(body):
	print body

def format_cols(imp,nr,title,artist,qby,separator = " "):
	def col_size(desired,strin):
		return desired + (len(str(strin)) - len(strin))

	return "|{{0:{0}^{1}}}|{0}{{1:{0}>{2}}}{0}|{0}{{2:{0}<{3}}}{0}|{0}{{3:{0}<{4}}}{0}|{0}{{4:{0}<{5}}}{0}|".format(
		separator,
		col_size(37, imp),
		col_size(3, nr),
		col_size(30, title),
		col_size(18, artist),
		col_size(8, qby)
	).format(imp, nr, title, artist, qby)

def printPlaylist(body):
	pl = json.loads(body)
	print(format_cols("","","","","","*"))
	print(format_cols(
		colored.bright("imp version " + IMP_VERSION),
		colored.bright("No."),
		colored.bright("Title"),
		colored.bright("Artist"),
		colored.bright("Queuedby")))
	print(format_cols("","","","","","*"))
	i = 0	
	for media in pl:
		print(format_cols(
			colored.green(an_imp[i]) if i < len(an_imp) else "",
			i if i > 0 else str("> 0"),
			media["info"]["title"],
			media["info"]["artist"],
			media["info"]["user"]))
		i += 1

	if i < len(an_imp):
		for j in range(i,len(an_imp)):
			print(format_cols(colored.green(an_imp[j]),"","","",""))
	print(format_cols("","","","","","*"))



def discard(body):
	pass


# Temp queueing
def add_youtube(vId):
	http.sendSimple("ENQUEUE", "/youtube/video/" + vId, discard)

def add_upload(file):
	f = open(file,"r")
	http.sendSimple("POST", "/upload", discard, FileBodyProducer(f))

def add_stream(uri):
	http.sendSimple("POST", "/stream", discard, FileBodyProducer(StringIO(uri)))

# Queue management
def playlist():
	http.sendSimple("GET", "/queue", printPlaylist)

def playlist_raw():
	http.sendSimple("GET", "/queue", printMe)

def flush():
	http.sendSimple("DELETE", "/queue", discard)

def history():
	http.sendSimple("GET", "/history", printPlaylist)

# Current
def next():
	http.sendSimple("NEXT", "/control/current", printMe)
def previous():
	http.sendSimple("PREVIOUS", "/control/current", printMe)
def pause():
	http.sendSimple("PAUSE", "/control/current", printMe)
def stop():
	http.sendSimple("STOP", "/control/current", printMe)
def replay():
	http.sendSimple("REPLAY", "/control/current", printMe)

# Favs
def favorite_add(type,name,rest):
	http.sendSimple("POST", "/favorites", discard, FileBodyProducer(StringIO(json.dumps({
		"type": type,
		"name": name,
		"options": rest
	}))))

# Volume
def volume_get():
	http.sendSimple("GET", "/control/volume", printMe)

def volume_set(volume):
	http.sendSimple("PUT", "/control/volume", discard, FileBodyProducer(StringIO(str(volume))))



def routeMain(argv):
	r = routing.Router(argv)
	# Queue management
	r.match        ( lambda b: playlist(), [] )
	r.pl           ( lambda b: playlist_raw() )
	r.flush        ( lambda b: flush() )
	r.history      ( lambda b: history() )

	# Enqueueing
	r.add          ( lambda b: add_youtube(b["id"]),
	                 [["youtube","yt","y","tube"],":id"],
	                 { "id": "[a-zA-Z0-9_-]+" } )
	r.add          ( lambda b: add_upload(b["file"]),
		             [["upload","ul","u","uload"],":file"] )
	r.add          ( lambda b: add_stream(b["uri"]),
		             [["stream","str","s"],":uri"] )

	# Favs
	r.fav          ( lambda b: favorite_add(b["type"],b["name"],b["..."]),
					 ["add",":type",":name","..."],
					 { "type": "stream|youtube" } )

	# Current
	r.next         ( lambda b: next() )
	r.previous     ( lambda b: previous() )
	r.pause        ( lambda b: pause() )
	r.stop         ( lambda b: stop() )
	r.replay       ( lambda b: replay() )

	# Controls
	r.volume       ( lambda b: volume_get() )
	r.v            ( lambda b: volume_get() )
	r.volume       ( lambda b: volume_set(int(b["val"])),
	                 [":val"] )
	r.v            ( lambda b: volume_set(int(b["val"])),
	                 [":val"] )

	r.finalize()

routeMain(sys.argv[1:])
