#!/usr/bin/env python

from twisted.internet.defer import Deferred, succeed
from twisted.web.client import Agent, readBody
from twisted.web.http_headers import Headers
from zope.interface import implements
from twisted.web.iweb import IBodyProducer
from twisted.internet.task import react

class StringProducer(object):
    implements(IBodyProducer)

    def __init__(self, body):
        self.body = body
        self.length = len(body)

    def startProducing(self, consumer):
        consumer.write(self.body)
        return succeed(None)

    def pauseProducing(self):
        pass

    def stopProducing(self):
        pass

def sendHTTP(
	method,
	uri,
	onResponse,
	bodyProducer = None,
	contentType = 'text/x-greeting'):
	def main(reactor):
		agent = Agent(reactor)
		d = agent.request(
			method,
			uri,
			Headers({'Content-Type': [contentType]}),
			bodyProducer)

		d.addCallback(onResponse)
		return d

	react(main)

def sendHTTPSimple(
	method,
	uri,
	onResponseBody,
	bodyProducer = None,
	contentType = "application/json"):
	def onResponse(response):
		d = readBody(response)
		d.addCallback(onResponseBody)
		return d

	sendHTTP(method, uri, onResponse, bodyProducer, contentType)

#def sendHTTPWithReceiver(
#	method,
#	uri,
#	receiver,
#	contentType = "application/json",
#	bodyProducer = None):
#	def onResponse(response):
#		finished = Deferred()
#		response.deliverBody(response)
#		d.addCallback(onResponseBody)
#		return d
#
#	sendHTTP(method, uri, onResponse, contentType, bodyProducer)

def printMe(body):
	print body

sendHTTPSimple(
	"GET",
	"http://localhost:8080/echo",
	printMe)
