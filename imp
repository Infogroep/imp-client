#!/usr/bin/env python
from fileprogressadapter import FileProgressProducer
from StringIO import StringIO
from httprequests import http, HTTPQueryRunner
import routing
import sys
import json
from playlistprint import printPlaylist
from twisted.web.client import FileBodyProducer


def discard(body):
	pass

def printMe(body):
	print body

def printPlaylist_resp(body):
	printPlaylist(json.loads(body))

# Temp queueing
def add_youtube(vId):
	http.reactOn(http.sendSimple("ENQUEUE", "/youtube/video/" + vId, discard))

def add_upload(files):
	r = upload_files(files)
	if r == None:
		print("No files specified for upload.")
	else:
		http.reactOn(r)

def onUploadProgress(fil):
	def onUploadProgress_inner(progress):
		sys.stdout.write("Uploading '%s'... %d%%\r" % (fil, (progress * 100)))
		sys.stdout.flush()
	return onUploadProgress_inner

def upload_files(files):
	if len(files) == 0:
		return None

	fil = files[0]
	return http.send("POST", "/upload", upload_on_response(fil,files[1:]), FileProgressProducer(fil,onUploadProgress(fil)))

def upload_on_response(curfile,files):
	def on_response(response):
		sys.stdout.write("Uploading '%s'... done.\n" % curfile)
		sys.stdout.flush()
		return upload_files(files)
	return on_response

def add_stream(uri):
	http.reactOn(http.sendSimple("POST", "/stream", discard, FileBodyProducer(StringIO(uri))))

# Queue management
def playlist():
	http.reactOn(http.sendSimple("GET", "/queue", printPlaylist_resp))

def playlist_raw():
	http.reactOn(http.sendSimple("GET", "/queue", printMe))

def flush():
	http.reactOn(http.sendSimple("DELETE", "/queue", discard))

def history():
	http.reactOn(http.sendSimple("GET", "/history", printPlaylist_resp))

# Current
def next():
	http.reactOn(http.sendSimple("NEXT", "/control/current", printMe))
def previous():
	http.reactOn(http.sendSimple("PREVIOUS", "/control/current", printMe))
def pause():
	http.reactOn(http.sendSimple("PAUSE", "/control/current", printMe))
def stop():
	http.reactOn(http.sendSimple("STOP", "/control/current", printMe))
def replay():
	http.reactOn(http.sendSimple("REPLAY", "/control/current", printMe))

# Favs
def favorite_add(type,name,rest):
	http.reactOn(http.sendSimple("POST", "/favorites", discard, FileBodyProducer(StringIO(json.dumps({
		"type": type,
		"name": name,
		"options": rest
	})))))

# Volume
def volume_get():
	http.reactOn(http.sendSimple("GET", "/control/volume", printMe))

def volume_set(volume):
	http.reactOn(http.sendSimple("PUT", "/control/volume", discard, FileBodyProducer(StringIO(str(volume)))))



def routeMain(argv):
	r = routing.Router(argv)
	# Queue management
	r.match        ( lambda b: playlist(), [] )
	r.pl           ( lambda b: playlist_raw() )
	r.flush        ( lambda b: flush() )
	r.history      ( lambda b: history() )

	# Enqueueing
	r.add          ( lambda b: add_youtube(b["id"]),
	                 [["youtube","yt","y","tube"],":id"],
	                 { "id": "[a-zA-Z0-9_-]+" } )
	r.add          ( lambda b: add_upload(b["..."]),
		             [["upload","ul","u","uload"],"..."] )
	r.add          ( lambda b: add_stream(b["uri"]),
		             [["stream","str","s"],":uri"] )

	# Favs
	r.fav          ( lambda b: favorite_add(b["type"],b["name"],b["..."]),
					 ["add",":type",":name","..."],
					 { "type": "stream|youtube" } )

	# Current
	r.skip         ( lambda b: next() )
	r.next         ( lambda b: next() )
	r.previous     ( lambda b: previous() )
	r.pause        ( lambda b: pause() )
	r.stop         ( lambda b: stop() )
	r.replay       ( lambda b: replay() )
	r.play         ( lambda b: replay() )

	# Controls
	r.volume       ( lambda b: volume_get() )
	r.v            ( lambda b: volume_get() )
	r.volume       ( lambda b: volume_set(int(b["val"])),
	                 [":val"] )
	r.v            ( lambda b: volume_set(int(b["val"])),
	                 [":val"] )

	r.finalize()

routeMain(sys.argv[1:])
